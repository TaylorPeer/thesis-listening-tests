import os
import json
import time
import random
import boto3

import streamlit as st
from streamlit_javascript import st_javascript

st.set_page_config(page_title="AI-Generated Drum Pattern Evaluation")


def set_page_styles():
    hide_header_style = """
            <style>
            header {visibility: hidden;}
            </style>
            """
    hide_streamlit_style = """
                <style>
                #MainMenu {visibility: hidden;}
                footer {visibility: hidden;}
                </style>
                """
    content_width_style = """
                <style>
                .block-container {max-width: 1000px !important;}
                </style>
                """
    st.markdown(hide_header_style, unsafe_allow_html=True)
    st.markdown(hide_streamlit_style, unsafe_allow_html=True)
    st.markdown(content_width_style, unsafe_allow_html=True)

    # Reduce padding at the top of the page
    st.markdown("""
            <style>
                   .block-container {
                        margin-top: -5rem;
                        padding-top: 2rem;
                        padding-bottom: 0rem;
                        padding-left: 5rem;
                        padding-right: 5rem;
                    }
            </style>
            """, unsafe_allow_html=True)


def show_intro_text():
    st.title('AI-Generated Drum Pattern Evaluation')

    st.write(
        "This is a survey evaluating the quality of drum patterns generated by various artificial intelligence methods.")
    st.write(
        "It is being conducted by [Taylor Peer](https://www.linkedin.com/in/taylorpeer/) as part of a Master Thesis in Software Engineering at the TU Wien in Vienna, Austria.")
    st.write(
        "To participate in the survey, please fill out the fields below. Then listen to the audio files at the bottom of the page and rate them according to the listed criteria.")

    st.markdown("""---""")


def get_basic_user_info():
    st.header('Basic Information')

    age = st.text_input('Your Age (optional)', '')
    gender = st.radio("Gender (optional)",
                      ('Male', 'Female', 'Other/diverse', 'Rather not say'), index=3)
    background = st.radio("Musical training (optional)",
                          ('None', 'Hobby musician or producer', 'Professional musician or producer', 'Rather not say'),
                          index=3)
    st.write(
        "If you'd like to receive the results of this survey once it's completed, please enter your email address.")
    email = st.text_input('Email Address (optional)', '')

    st.markdown("""---""")
    return {"age": age, "gender": gender, "background": background, "email": email}


def get_client_ip():
    url = 'https://api.ipify.org?format=json'
    script = (f'await fetch("{url}").then('
              'function(response) {'
              'return response.json();'
              '})')

    try:
        result = st_javascript(script)
        if isinstance(result, dict) and 'ip' in result:
            return result['ip']

    except:
        # TODO unable to get IP address - what do?
        pass


def populate_audio():
    for root, dirs, files in os.walk("audio"):
        for file in files:
            if file.endswith(".mp3"):
                yield os.path.join(root, file)


def select_audio():
    update_path = False

    update_path = update_path or "selected_audio_path" not in st.session_state
    update_path = update_path or st.session_state.selected_audio_path is None
    update_path = update_path or "prev_genre" in st.session_state and st.session_state.prev_genre != selected_genre

    if update_path:
        audio_files = list(populate_audio())
        if selected_genre != "Any Genre":
            audio_files = [audio_file for audio_file in audio_files if audio_file.split("/")[1] == selected_genre]
        selected_audio_path = random.choice(audio_files)
        st.session_state.selected_audio_path = selected_audio_path
        st.session_state.prev_genre = selected_genre


def submit():
    current_time_ms = round(time.time() * 1000)
    aws_client.put_object(
        Bucket='listening-test-results',
        Key="dev/{}-{}.json".format(user_info["ip_address"].replace(".", "_"), current_time_ms),
        Body=json.dumps(data_dict, indent=2, default=str)
    )
    st.session_state.selected_audio_path = None
    if "ratings_count" not in st.session_state:
        st.session_state.ratings_count = 1
    else:
        st.session_state.ratings_count = st.session_state.ratings_count + 1


ACCESS_KEY = os.environ['AWS_ACCESS_KEY']
SECRET_KEY = os.environ['AWS_SECRET_KEY']
aws_client = boto3.client('s3', aws_access_key_id=ACCESS_KEY, aws_secret_access_key=SECRET_KEY)

set_page_styles()
show_intro_text()
user_info = get_basic_user_info()
if "ip_address" not in user_info:
    user_info["ip_address"] = get_client_ip()

st.header('Evaluation')

audio_files = list(populate_audio())
genres = tuple(set([audio_file.split("/")[1] for audio_file in audio_files] + ["Any Genre"]))
selected_genre = st.radio("Select a Genre of Drum Patterns to Evaluate", genres, index=len(genres) - 1, on_change=select_audio)
select_audio()
path_components = st.session_state.selected_audio_path.split("/")
source = path_components[2]
song_id = path_components[3]
audio_file = open(st.session_state.selected_audio_path, 'rb')
audio_bytes = audio_file.read()
#st.write(selected_genre)  # TODO remove
#st.write(song_id)  # TODO remove
st.audio(audio_bytes, format='audio/wav')

radio_values = ["Definitely human-composed", "Probably human-composed",
                "Unsure",
                "Probably AI-generated", "Definitely AI-generated"]
radio1 = st.radio("Is this drum pattern human-composed or AI-generated?",
                  tuple(radio_values),
                  index=2)

if "ratings_count" in st.session_state:
    st.write("You have submitted {} ratings".format(st.session_state.ratings_count))

st.button('Submit', on_click=submit)

# TODO Submit button -> auto reload + show current "score"
# Thank you! You have rated x drum beats. You correctly identified y% as being human or machine generated.

data_dict = {
    "filename": st.session_state.selected_audio_path,
    "reviewer": {
        "age": user_info["age"],
        "gender": user_info["gender"],
        "background": user_info["background"],
        "email": user_info["email"],
        "ip": user_info["ip_address"]
    },
    "rating": {
        "human-or-ai": radio1
    }
}
